javascript:((e,t)=>{"use strict";const n="NgSlackLinkifier",s="0.3.3",r="nsl-github-commit",i="nsl-github-issue",o="nsl-jira",a="nsl-processed",l="nsl-post-processed",c="%";class h{static get TOKEN_NAME(){return this._notImplemented()}static get TOKEN_DESCRIPTION_HTML(){return this._notImplemented()}static validateToken(e){if(!e||"string"!=typeof e)throw new Error(`Empty or invalid token (${typeof e}: ${e}). Please, provide an non-empty string.`)}constructor(){this._cacheMaxAge=6e4,this._cache=new Map,this.setToken(null)}cleanUp(){this.setToken(null),this._cache.clear()}hasToken(){return void 0!==this._token}requiresToken(){return this._notImplemented()}setToken(e){this._token=e||void 0,this._headers=this._token&&this._generateHeaders(this._token)}_generateHeaders(e){this._notImplemented(e)}_getErrorConstructorExtending(e){const t=this;return class extends e{get provider(){return t}}}_getErrorForResponse(e){this._notImplemented(e)}_getFromCache(e){if(!this._cache.has(e))return;const{date:t,response:n}=this._cache.get(e);if(!(Date.now()-t>this._cacheMaxAge))return n;this._cache.delete(e)}_getJson(t){let n=this._getFromCache(t);return n||(n=e.fetch(t,{headers:{Accept:"application/json",...this._headers}}).then(async e=>e.ok?e.json():Promise.reject(await this._getErrorForResponse(e))).catch(e=>{throw this._getFromCache(t)===n&&this._cache.delete(t),e}),this._cache.set(t,{date:Date.now(),response:n})),n}_notImplemented(){throw new Error("Not implemented.")}_wrapError(e,t){return new(e instanceof Error?e.constructor:Error)(`${t}\n${e.message||e}`)}}class p extends Error{get provider(){throw new Error("Not implemented.")}}class d extends Error{constructor(){super("Cleaning up.")}}class u{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}class g extends h{static get TOKEN_NAME(){return"GitHub access token"}static get TOKEN_DESCRIPTION_HTML(){const e=this.TOKEN_NAME,t="https://github.com/settings/tokens/new";return`\n        <p>\n          A ${e} can be used to make authenticated requests to GitHub's API, when retrieving info for links to\n          issues and PRs. Authenticated requests have a much higher limit for requests per hour (at the time of writing\n          5000 vs 60 for anonymous requests).\n        </p>\n        <p>\n          To create a ${e} visit: <a href="${t}?description=${n}" target="_blank">${t}</a>\n          <i>(no scopes required)</i>\n        </p>\n      `}constructor(){super(),this._baseUrl="https://api.github.com/repos",this._rateLimitResetTime=0}getCommitInfo(e,t,n){const s=`${this._baseUrl}/${e}/${t}/commits/${n}`;return this._getJson(s).then(e=>({sha:e.sha,message:e.commit.message,author:this._extractUserInfo(e.author),committer:this._extractUserInfo(e.committer),authorDate:new Date(e.commit.author.date),committerDate:new Date(e.commit.committer.date),stats:e.stats,files:e.files.map(e=>this._extractFileInfo(e))})).catch(s=>{throw this._wrapError(s,`Error getting GitHub info for ${e}/${t}@${n}:`)})}getIssueInfo(e,t,n){const s=`${this._baseUrl}/${e}/${t}/issues/${n}`;return this._getJson(s).then(e=>({number:e.number,title:e.title,description:e.body.trim(),author:this._extractUserInfo(e.user),state:e.state,labels:e.labels.map(e=>e.name).sort(),isPr:e.html_url.endsWith(`/pull/${e.number}`)})).catch(s=>{throw this._wrapError(s,`Error getting GitHub info for ${e}/${t}#${n}:`)})}getLatestTag(e,t){const n=`${this._baseUrl}/${e}/${t}/tags?per_page=1`;return this._getJson(n).then(e=>e[0]).catch(n=>{throw this._wrapError(n,`Error getting latest GitHub tag ${e}/${t}:`)})}requiresToken(){return!this.hasToken()&&this._rateLimitResetTime>Date.now()&&`Anonymous rate-limit reached (until ${new Date(this._rateLimitResetTime).toLocaleString()})`}_extractFileInfo(e){return{filename:e.filename,patch:e.patch,status:e.status,stats:{total:e.changes,additions:e.additions,deletions:e.deletions}}}_extractUserInfo(e){return{avatar:e.avatar_url,username:e.login,url:e.html_url}}_generateHeaders(e){return{Authorization:`token ${e}`}}async _getErrorForResponse(e){let t=Error;const n=await e.json();let s=n.message||JSON.stringify(n);switch(e.status){case 401:this.hasToken()&&(t=this._getErrorConstructorExtending(p));break;case 403:if("0"===e.headers.get("X-RateLimit-Remaining")){const t=e.headers.get("X-RateLimit-Limit"),n=new Date(1e3*e.headers.get("X-RateLimit-Reset"));this._rateLimitResetTime=n.getTime(),s=`0/${t} API requests remaining until ${n.toLocaleString()}.\n${s}`}}return new t(`${e.status} (${e.statusText}) - ${s}`)}}class m{get length(){return this._keys().length}constructor(){this._resetItems()}clear(){this._resetItems()}getItem(e){return this._has(e)?this._items[e]:null}key(e){const t=this._keys();return e<t.length?t[e]:null}removeItem(e){delete this._items[e]}setItem(e,t){this._items[e]=`${t}`}_has(e){return Object.prototype.hasOwnProperty.call(this._items,e)}_keys(){return Object.keys(this._items)}_resetItems(){this._items=Object.create(null)}}class _ extends h{static get TOKEN_NAME(){return"Jira e-mail and access token"}static get TOKEN_DESCRIPTION_HTML(){const e=this.TOKEN_NAME,t="https://id.atlassian.com/manage/api-tokens",n='<a href="https://cors-anywhere.herokuapp.com/" target="_blank">https://cors-anywhere.herokuapp.com/</a>';return`\n        <p>\n          A ${e} is required in order to retrieve info for links to Jira issues. Unauthenticated requests are\n          <b>not supported</b> by Jira's API, so you will not be able to see any info without providing a ${e}.\n        </p>\n        <p>To create a Jira access token visit: <a href="${t}" target="_blank">${t}</a></p>\n        <br />\n        <p style="\n              background-color: rgba(255, 0, 0, 0.1);\n              border: 2px solid gray;\n              border-radius: 6px;\n              color: red;\n              padding: 7px;\n            ">\n          <b>WARNING:</b><br />\n          Currently, all requests to Jira's API are sent through ${n} in order to work around CORS\n          restrictions. There will, hopefully, be a better solution in the future, but for now <b>do not</b> provide a\n          ${e}, unless you understand and feel comfortable with the implications of sending the requests\n          (including your encoded ${e}) through ${n}.\n        </p>\n        <br />\n        <p>\n          <b>IMPORTANT:</b><br />\n          Enter the ${e} in the field below in the format <code>&lt;email&gt;:&lt;access-token&gt;</code> (e.g.\n          <code>myself@mail.me:My4cc3ssT0k3n</code>).\n        </p>\n      `}static validateToken(e){if(super.validateToken(e),!/^[^:]+@[^:]+:./.test(e)){const t=e.replace(/\w/g,"*");throw new Error(`Invalid token format (${t}). `+"Please, provide the token in the form `<email>:<access-token>` (e.g. `myself@mail.me:My4cc3ssT0k3n`).")}}constructor(){super(),this._baseUrl="https://angular-team.atlassian.net/rest/api/3",this._baseUrl=`https://cors-anywhere.herokuapp.com/${this._baseUrl}`}getIssueInfo(e){const t=`${this._baseUrl}/issue/${e}?expand=renderedFields&`+"fields=assignee,description,fixVersions,issuelinks,issuetype,project,reporter,status,summary";return this._getJson(t).then(e=>({number:e.key,type:e.fields.issuetype.name,title:e.fields.summary,description:e.renderedFields.description.trim(),reporter:this._extractUserInfo(e.fields.reporter),assignee:e.fields.assignee&&this._extractUserInfo(e.fields.assignee),status:this._extractStatusInfo(e.fields.status),project:e.fields.project.name,fixVersions:e.fields.fixVersions.map(e=>e.name).sort(),issueLinks:e.fields.issuelinks.map(e=>this._extractIssueLinkInfo(e)).sort((e,t)=>this._sortIssueLinks(e,t))})).catch(t=>{throw this._wrapError(t,`Error getting Jira info for ${e}:`)})}requiresToken(){return!this.hasToken()&&"Unauthenticated requests are not supported."}_extractIssueLinkInfo(e){const t=e.hasOwnProperty("inwardIssue"),n=t?e.inwardIssue:e.outwardIssue;return{type:t?e.type.inward:e.type.outward,otherIssue:{number:n.key,url:`https://angular-team.atlassian.net/browse/${n.key}`,title:n.fields.summary,status:this._extractStatusInfo(n.fields.status)}}}_extractStatusInfo(e){return{name:e.name,color:e.statusCategory.colorName}}_extractUserInfo(e){return{avatar:e.avatarUrls["32x32"],username:e.name,name:e.displayName,url:`https://angular-team.atlassian.net/people/${e.accountId}`}}_generateHeaders(t){return{Authorization:`Basic ${e.btoa(t)}`}}async _getErrorForResponse(e){let t=Error;const n=e.headers.get("Content-Type").includes("application/json")?await e.json():(await e.text()).trim(),s=Array.isArray(n.errorMessages)?1===n.errorMessages.length?n.errorMessages[0]:["Errors:",...n.errorMessages.map(e=>`  - ${e}`)].join("\n"):JSON.stringify(n);switch(e.status){case 401:this.hasToken()&&(t=this._getErrorConstructorExtending(p))}return new t(`${e.status} (${e.statusText}) - ${s}`)}_sortIssueLinks(e,t){return e.type<t.type?-1:e.type>t.type?1:e.otherIssue.number<t.otherIssue.number?-1:1}}class y{constructor(e=(()=>void 0)){this._postProcessNode=e,this._observer=new MutationObserver(e=>e.forEach(e=>e.addedNodes&&setTimeout(()=>this.processAll(e.addedNodes),500)))}cleanUp(){this._observer.disconnect()}observe(e){this._observer.observe(e,{childList:!0,subtree:!0})}processAll(e,t=!1){const n=".c-message__body, .c-message_attachment__body, .c-message_kit__text",s=new Set;e.forEach(e=>{if(s.has(e.parentNode))return;(e.closest?e.closest(n):e.parentNode&&e.parentNode.closest(n))?this._processNode(e.parentNode,t):e.querySelectorAll&&e.querySelectorAll(n).forEach(e=>this._processNode(e,t))})}_acceptNodeInTextNodeWalker(e){return!e.parentNode||"A"===e.parentNode.nodeName||e.parentNode.parentNode&&"A"===e.parentNode.parentNode.nodeName?NodeFilter.FILTER_REJECT:NodeFilter.FILTER_ACCEPT}_processNode(e,t){const n=new Set([...this._processNodeMdLinks(e),...this._processNodeGithubCommits(e),...this._processNodeGithubIssues(e),...this._processNodeJira(e)]);n.forEach(e=>e.classList.add(a)),(t||n.size)&&this._postProcessNode(e)}_processNodeGithubCommits(e){const n=new Set,s=t.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:e=>this._acceptNodeInTextNodeWalker(e)},!1);let i;for(;i=s.nextNode();){const e=/(?:([\w.-]+)\/)?([\w.-]+)@([A-Fa-f\d]{7,})\b/.exec(i.textContent);if(e){const[,s="angular",r="angular",o]=e,a=`https://github.com/${s}/${r}/commit/${o}`,l=Object.assign(t.createElement("a"),{href:a,target:"_blank",textContent:a}),c=t.createTextNode(i.textContent.slice(e.index+e[0].length));i.textContent=i.textContent.slice(0,e.index),i.after(l),l.after(c),n.add(l)}}return e.querySelectorAll(`a:not(.${a})`).forEach(e=>{const t=/^https:\/\/github\.com\/([\w.-]+)\/([\w.-]+)\/commit\/([A-Fa-f\d]{7,})$/,s=t.exec(e.href)||new RegExp(`^https://slack-redir\\.net/link\\?url=https${c}3A${c}2F${c}2Fgithub\\.com${c}2F([\\w.-]+)${c}2F([\\w.-]+)${c}2Fcommit${c}2F([A-Fa-f\\d]{7,})$`).exec(e.href);if(s){const[,t,i,o]=s;e.classList.add(r),e.dataset.nslOwner=t,e.dataset.nslRepo=i,e.dataset.nslCommit=o,n.add(e)}const i=t.exec(e.innerHTML);if(i){const[,t,s,r]=i,o=`${"angular"===t?"":`${t}/`}${s}`;e.innerHTML=`<b>${o}@${r.slice(0,7)}</b>`,n.add(e)}}),n}_processNodeGithubIssues(e){const n=new Set,s=t.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:e=>this._acceptNodeInTextNodeWalker(e)},!1);let r;for(;r=s.nextNode();){const e=/(?:(?:([\w.-]+)\/)?([\w.-]+))?#(\d+)\b/.exec(r.textContent);if(e){const[,s="angular",i="angular",o]=e,a=`https://github.com/${s}/${i}/issues/${o}`,l=Object.assign(t.createElement("a"),{href:a,target:"_blank",textContent:a}),c=t.createTextNode(r.textContent.slice(e.index+e[0].length));r.textContent=r.textContent.slice(0,e.index),r.after(l),l.after(c),n.add(l)}}return e.querySelectorAll(`a:not(.${a})`).forEach(e=>{const t=/^https:\/\/github\.com\/([\w.-]+)\/([\w.-]+)\/(?:issues|pull)\/(\d+)$/,s=t.exec(e.href)||new RegExp(`^https://slack-redir\\.net/link\\?url=https${c}3A${c}2F${c}2Fgithub\\.com${c}2F([\\w.-]+)${c}2F([\\w.-]+)${c}2F(?:issues|pull)${c}2F(\\d+)$`).exec(e.href);if(s){const[,t,r,o]=s;e.classList.add(i),e.dataset.nslOwner=t,e.dataset.nslRepo=r,e.dataset.nslNumber=o,n.add(e)}const r=t.exec(e.innerHTML);if(r){const[,t,s,i]=r,o="angular"===t,a="angular"===s,l=`${o?"":`${t}/`}${o&&a?"":s}`;e.innerHTML=`<b>${l}#${i}</b>`,n.add(e)}}),n}_processNodeJira(e){const n=new Set,s=t.createTreeWalker(e,NodeFilter.SHOW_TEXT,{acceptNode:e=>this._acceptNodeInTextNodeWalker(e)},!1);let r;for(;r=s.nextNode();){const e=/(?<!https:\/\/angular-team\.atlassian\.net\/browse\/)\b([A-Z]+-\d+)\b/.exec(r.textContent);if(e){const s=`https://angular-team.atlassian.net/browse/${e[1]}`,i=Object.assign(t.createElement("a"),{href:s,target:"_blank",textContent:s}),o=t.createTextNode(r.textContent.slice(e.index+e[0].length));r.textContent=r.textContent.slice(0,e.index),r.after(i),i.after(o),n.add(i)}}return e.querySelectorAll(`a:not(.${a})`).forEach(e=>{const t=/^https:\/\/angular-team\.atlassian\.net\/browse\/([A-Z]+-\d+)$/,s=t.exec(e.href)||new RegExp(`^https://slack-redir\\.net/link\\?url=https${c}3A${c}2F${c}2Fangular-team\\.atlassian\\.net${c}2Fbrowse${c}2F([A-Z]+-\\d+)$`).exec(e.href);s&&(e.classList.add(o),e.dataset.nslNumber=s[1],n.add(e));const r=t.exec(e.innerHTML);r&&(e.innerHTML=`<b>${r[1]}</b>`,n.add(e))}),n}_processNodeMdLinks(e){const t=new Set;return e.querySelectorAll(`a:not(.${a})`).forEach(e=>{const n=e.previousSibling,s=n&&n.nodeType===Node.TEXT_NODE&&/\[([^\]]+)]\(/.exec(n.textContent),r=s&&e.nextSibling,i=r&&r.nodeType===Node.TEXT_NODE&&/\)/.exec(r.textContent);i&&(n.textContent=n.textContent.slice(0,-s[0].length),r.textContent=r.textContent.slice(i[0].length),e.innerHTML=`<b>${s[1]}</b>`,t.add(e))}),t}}class b{constructor(e){this._prefix=`[${e}]`}cleanUp(){}log(...e){console.log(this._prefix,...e)}warn(...e){console.warn(this._prefix,...e)}error(...e){console.error(this._prefix,...e)}}class f{constructor(){this._crypto=e.crypto.subtle,this._version="1",this._decoder=new TextDecoder,this._encoder=new TextEncoder,this._algorithm={name:"AES-CBC",iv:this._encoder.encode("SupposedlyRandom")},this._superSecretKey=null,this._ready=this._init()}cleanUp(){}async decrypt(e){await this._ready;const[t,n,...s]=e.split(":"),r=n&&n.split(",").filter(Boolean).map(Number);if(s.length||!r||!r.length||r.some(Number.isNaN))throw new Error(`Unable to decrypt \`${e}\`: Invalid or unknown format.`);if(t!==this._version)throw new Error(`Unable to decrypt \`${e}\`: Version mismatch (expected: ${this._version}).`);const i=await this._crypto.decrypt(this._algorithm,this._superSecretKey,Uint16Array.from(r));return this._decoder.decode(i)}async encrypt(e){await this._ready;const t=await this._crypto.encrypt(this._algorithm,this._superSecretKey,this._encoder.encode(e));return`${this._version}:${new Uint16Array(t).join(",")}`}async _init(){this._superSecretKey=await this._crypto.importKey("raw",this._encoder.encode("$NgSl@ckL1nk1fy$"),this._algorithm,!1,["decrypt","encrypt"])}}class x{constructor(e,t){this._prefix=`${e}:`,this._store=t}clear(){this.keys().forEach(e=>this.delete(e))}delete(e){this._store.removeItem(this._keyFor(e))}get(e){const t=this._store.getItem(this._keyFor(e));return null===t?void 0:JSON.parse(t)}has(e){return null!==this._store.getItem(this._keyFor(e))}keys(){return Array.from(new Array(this._store.length),(e,t)=>this._store.key(t)).filter(e=>e.startsWith(this._prefix))}set(e,t){void 0!==t&&this._store.setItem(this._keyFor(e),JSON.stringify(t))}_keyFor(e){return`${this._prefix}${e}`}}class w{constructor(t){this.local=new x(t,e.localStorage),this.session=new x(t,e.sessionStorage),this.inMemory=new x(t,new m)}cleanUp(){this.inMemory.clear()}clear(){this.local.clear(),this.session.clear(),this.inMemory.clear()}delete(e){this.local.delete(e),this.session.delete(e),this.inMemory.delete(e)}get(e){const t=this.has(e);return t?t.get(e):void 0}has(e){return this.inMemory.has(e)?this.inMemory:this.session.has(e)?this.session:!!this.local.has(e)&&this.local}}class ${constructor(){this.widgetUtils=new v,this._openDialogDeferreds=[],this._popup=null,this._popupAnchor=null,this._hidePopupTimeout=null,this._showPopupTimeout=null,this._snackbarContainer=this._createSnackbarContainer(),this._scratchpad=t.createElement("div");const n=e=>this._onResizeListeners.forEach(t=>t(e));e.addEventListener("resize",n),this._onResizeCleanUp=(()=>{e.removeEventListener("resize",n),this._onResizeListeners=[]}),this._onResizeListeners=[()=>this._openDialogDeferreds.forEach(({dialog:e})=>this._updateDialogSizing(e)),()=>this._popup&&this._updatePopupPositioning(this._popup,this._popupAnchor)];const s=this;this._DialogDeferred=class extends u{constructor(e){s._openDialogDeferreds.push(super()),this.dialog=e,this.promise=this.promise.finally(()=>{s._fadeOut(e);const t=s._openDialogDeferreds.indexOf(e);-1!==t&&s._openDialogDeferreds.splice(t,1)})}}}cleanUp(){this._onResizeCleanUp(),this._snackbarContainer.remove(),this.hidePopup();const e=new d;for(;this._openDialogDeferreds.length;)this._openDialogDeferreds.pop().reject(e)}copyToClipboard(e){const n=t.createElement("textarea");t.body.appendChild(n),n.textContent=e,n.select();const s=t.execCommand("copy");if(t.body.removeChild(n),!s)throw new Error("Copying to clipboard failed.")}escapeHtml(e){this._scratchpad.textContent=e;const t=this._scratchpad.innerHTML;return this._scratchpad.textContent="",t}hidePopup(){this._cancelHidePopup(),this._popup&&(this._fadeOut(this._popup),this._popup=null,this._popupAnchor=null)}scheduleHidePopup(e){return!this._hidePopupTimeout&&(this._cancelShowPopup(),!!this._popup&&(this._hidePopupTimeout=setTimeout(()=>this.hidePopup(),e),!0))}scheduleShowPopup(e,t,n){return this._cancelHidePopup(),this._cancelShowPopup(),this._showPopupTimeout=setTimeout(()=>this.showPopup(e,t),n),!0}showDialog(e,r,i){const o=Object.assign(t.createElement("div"),{className:"nsl-dialog-backdrop",innerHTML:`\n          <div class="nsl-dialog">\n            <header class="nsl-dialog-header">${n} v${s}</header>\n            <section class="nsl-dialog-content"></section>\n            <footer class="nsl-dialog-actions">\n              <button class="nsl-dialog-btn-ok">${r}</button>\n              <button class="nsl-dialog-btn-cancel">${i}</button>\n            </footer>\n          </div>\n        `,style:"\n          align-items: center;\n          background-color: rgba(0, 0, 0, 0.5);\n          bottom: 0;\n          display: flex;\n          justify-content: center;\n          padding: 15px;\n          position: fixed;\n          left: 0;\n          right: 0;\n          top: 0;\n          z-index: 10200;\n        "});Object.assign(o.querySelector(".nsl-dialog"),{style:"\n          background-color: white;\n          border: 1px solid lightgray;\n          border-radius: 6px;\n          box-shadow: 0 0 0 1px rgba(0, 0, 0, .08), 0 4px 12px 0 rgba(0, 0, 0, .12);\n          box-sizing: border-box;\n          display: flex;\n          flex-direction: column;\n          overflow: auto;\n          padding: 15px;\n          pointer-events: all;\n        "}),Object.assign(o.querySelector(".nsl-dialog-header"),{style:"\n          color: gray;\n          font-size: 0.75em;\n          text-align: right;\n        "}),this._insertContent(Object.assign(o.querySelector(".nsl-dialog-content"),{style:"\n            user-select: text;\n          "}),e),Object.assign(o.querySelector(".nsl-dialog-actions"),{style:"\n          display: flex;\n          justify-content: flex-end;\n          user-select: text;\n        "}),this.widgetUtils.asButton(this.widgetUtils.withStyles(o.querySelector(".nsl-dialog-btn-ok"),{marginRight:"15px"}),"green",{click:()=>a.resolve(!0)}),this.widgetUtils.asButton(o.querySelector(".nsl-dialog-btn-cancel"),"gray",{click:()=>a.resolve(!1)});const a=new this._DialogDeferred(o);return t.body.appendChild(o),this._updateDialogSizing(o),this._fadeIn(o),a.promise}showPopup(e,n){this._cancelShowPopup(),this.hidePopup();this._popupAnchor=n.target,this._popup=Object.assign(t.createElement("div"),{className:"nsl-popup",onmouseenter:()=>this._cancelHidePopup(),onmouseleave:()=>this.hidePopup(),style:"\n          background-color: white;\n          border: 1px solid gray;\n          border-radius: 6px;\n          box-shadow: 0 0 0 1px rgba(0, 0, 0, .08), 0 4px 12px 0 rgba(0, 0, 0, .12);\n          overflow: auto;\n          padding: 10px;\n          position: fixed;\n          user-select: text;\n          z-index: 10100;\n        "}),this._insertContent(this._popup,e),this._updatePopupPositioning(this._popup,this._popupAnchor),t.body.appendChild(this._popup),this._fadeIn(this._popup)}showSnackbar(e,n=2e3){const s=Object.assign(t.createElement("div"),{className:"nsl-snackbar",innerHTML:'\n          <section class="nsl-snackbar-content"></section>\n          <button class="nsl-snackbar-btn-close">&#x2715;</button>\n        ',style:"\n          background-color: white;\n          border: 1px solid lightgray;\n          border-radius: 6px;\n          box-shadow: 0 0 0 1px rgba(0, 0, 0, .08), 0 4px 12px 0 rgba(0, 0, 0, .12);\n          box-sizing: border-box;\n          display: flex;\n          margin-top: 5px;\n          max-height: 500px;\n          max-width: 750px;\n          min-width: 400px;\n          pointer-events: all;\n        "});this._insertContent(Object.assign(s.querySelector(".nsl-snackbar-content"),{style:"\n            overflow: auto;\n            padding: 10px 5px 10px 10px;\n            user-select: text;\n          "}),e),Object.assign(s.querySelector(".nsl-snackbar-btn-close"),{onclick:()=>this._fadeOut(s),onmouseenter:e=>e.target.style.color="red",onmouseleave:e=>e.target.style.color="lightgray",style:"\n          align-self: flex-start;\n          background-color: transparent;\n          border: none;\n          color: lightgray;\n          cursor: pointer;\n          margin-top: -5px;\n          padding: 5px;\n        "}),this._snackbarContainer.appendChild(s);const r=this._fadeIn(s);return n<0?r:r.then(()=>new Promise(e=>setTimeout(e,n))).then(()=>this._fadeOut(s))}_animateProp(e,t,n,s,r=200){const i=e.style;return this._withRafInterval([()=>i.transition="",()=>i[t]=n,()=>i.transition=`${t} ${r}ms linear`,()=>i[t]=s]).then(()=>new Promise(e=>setTimeout(e,r)))}_calculatePopupPositioning(t){const n=t.getBoundingClientRect(),s=n.top,r=e.innerHeight-n.bottom,i=r<=500&&(s>500||s>r);return{maxHeight:`${Math.min(750,(i?s:r)-10)}px`,top:i?"auto":`${n.bottom}px`,bottom:i?`${e.innerHeight-n.top}px`:"auto",...(()=>{const t=(n.left+n.right)/2;let s=Math.max(10,t-450),r=Math.min(e.innerWidth-10,s+900);return r-s<900&&(s=Math.max(10,r-900)),{left:`${s}px`,right:`${e.innerWidth-r}px`}})()}}_cancelHidePopup(){this._hidePopupTimeout&&(clearTimeout(this._hidePopupTimeout),this._hidePopupTimeout=null)}_cancelShowPopup(){this._showPopupTimeout&&(clearTimeout(this._showPopupTimeout),this._showPopupTimeout=null)}_createSnackbarContainer(){const e=Object.assign(t.createElement("div"),{className:"nsl-snackbar-container",style:"\n          bottom: 10px;\n          display: flex;\n          flex-direction: column-reverse;\n          overflow: auto;\n          pointer-events: none;\n          position: fixed;\n          right: 10px;\n          top: 10px;\n          z-index: 10300;\n        "});return t.body.appendChild(e),e}_fadeIn(e,t){return this._animateProp(e,"opacity",.1,1,t)}_fadeOut(e,t){return this._animateProp(e,"opacity",1,.1,t).then(()=>e.remove())}_insertContent(e,t){"string"==typeof t?e.innerHTML=t:(e.innerHTML="",e.appendChild(t))}_updateDialogSizing(t){const n=e.innerWidth-30,s=e.innerHeight-30;Object.assign(t.firstElementChild.style,{minWidth:`${Math.min(750,n)}px`,maxWidth:`${Math.min(900,n)}px`,minHeight:`${Math.min(500,s)}px`,maxHeight:`${Math.min(700,s)}px`})}_updatePopupPositioning(e,t){const n=this._calculatePopupPositioning(t);Object.assign(e.style,n)}_withRafInterval(t){return new Promise((n,s)=>{if(!t.length)return n();t.shift()(),e.requestAnimationFrame(()=>this._withRafInterval(t).then(n,s))})}}class k{constructor(e){this._owner="gkalpak",this._repo="ng-slack-linkifier",this._versionRe=/^\d+\.\d+\.\d+(?:-(?:alpha|beta|rc)\.\d+)?$/,this._ghUtils=e}async checkForUpdate(t){if(/^X\.Y\.Z-VERSION$/.test(t))return;if(!this._versionRe.test(t))throw new Error(`Invalid current version format: ${t} (expected: X.Y.Z[-(alpha|beta|rc).K])`);const n=await this._getLatestVersion(),s=n&&this._getDownloadUrl(n);return n&&-1===this._compareVersions(t,n)&&{version:n,url:s,code:await e.fetch(s).then(e=>e.text())}}cleanUp(){}_compareVersions(e,t){const n=e.split(/[.-]/),s=t.split(/[.-]/);for(let e=0,t=n.length;e<t;++e){if(s.length===e)return-1;const t=isNaN(n[e])?n[e]:Number(n[e]),r=isNaN(s[e])?s[e]:Number(s[e]);if(t<r)return-1;if(t>r)return 1}return n.length<s.length?1:0}_getDownloadUrl(e){return`https://cdn.jsdelivr.net/gh/${this._owner}/${this._repo}@${e}/dist/index.min.js`}async _getLatestVersion(){const e=await this._ghUtils.getLatestTag(this._owner,this._repo),t=e&&e.name.slice(1);return t&&this._versionRe.test(t)?t:void 0}}class v{asButton(e,t,n={}){return this.withListeners(this.withListeners(e,n),{mouseenter:e=>e.target.style.borderColor="orange",mouseleave:e=>e.target.style.borderColor="white"}),this.withStyles(e,{backgroundColor:t,border:"2px solid white",borderRadius:"6px",color:"white",padding:"10px 15px"})}asButtonLink(e,t={}){return this.withListeners(this.withListeners(e,t),{mouseenter:e=>e.target.style.color="orange",mouseleave:e=>e.target.style.color=null}),this.withStyles(e,{textDecoration:"underline"})}withListeners(e,t){return Object.keys(t).forEach(n=>{const s="string"==typeof t[n]?new Function("event",t[n]):t[n];e.addEventListener(n,s)}),e}withStyles(e,t){return Object.assign(e.style,t),e}}(new class{constructor(){this._KEYS=new Map([[g,1],[_,2]]),this._cleanUpables=[this._logUtils=new b(`${n} v${s}`),this._secretUtils=new f,this._storageUtils=new w(n),this._linkifier=new y(e=>this._addListeners(e)),this._uiUtils=new $,this._ghUtils=new g,this._jiraUtils=new _,this._updateUtils=new k(this._ghUtils)],this._cleanUpFns=[()=>this._destroyedDeferred.reject(new d)],this._destroyedDeferred=new u}cleanUp(){for(this._logUtils.log("Uninstalling...");this._cleanUpables.length||this._cleanUpFns.length;){for(;this._cleanUpables.length;)this._cleanUpables.shift().cleanUp();for(;this._cleanUpFns.length;)this._cleanUpFns.shift()()}this._logUtils.log("Uninstalled.")}async main(){try{e.__ngSlackLinkifyCleanUp&&e.__ngSlackLinkifyCleanUp(),e.__ngSlackLinkifyCleanUp=(()=>{this.cleanUp(),e.__ngSlackLinkifyCleanUp=null}),this._logUtils.log("Installing..."),this._ghUtils.setToken(await this._getStoredTokenFor(g)),this._jiraUtils.setToken(await this._getStoredTokenFor(_));const n=t.querySelector("#client_body");this._linkifier.processAll([n],!0),this._linkifier.observe(n),this._postInstall(),this._logUtils.log("Installed.")}catch(e){this._onError(e)}}_addListeners(e){const t=new Set;e.querySelectorAll(`.${r}:not(.${l})`).forEach(e=>{t.add(e),this._addListenersForLink(e,e=>this._getPopupContentForGithubCommit(e))}),e.querySelectorAll(`.${i}:not(.${l})`).forEach(e=>{t.add(e),this._addListenersForLink(e,e=>this._getPopupContentForGithubIssue(e))}),e.querySelectorAll(`.${o}:not(.${l})`).forEach(e=>{t.add(e),this._addListenersForLink(e,e=>this._getPopupContentForJira(e))}),t.forEach(e=>{e.classList.add(l),this._cleanUpFns.push(()=>e.classList.remove(l))})}_addListenersForLink(e,t){const n=e.style,s=e.dataset;let r=0;const i=async e=>{try{const i=r;if(await this._whileNotDestroyed(new Promise(e=>setTimeout(e,500))),i!==r)return;n.cursor="progress";const o=await this._whileNotDestroyed(t(s));if(i!==r)return;n.cursor="help",this._uiUtils.showPopup(o,e)}catch(e){this._onError(e)}},o=()=>{++r,n.cursor="help",this._uiUtils.scheduleHidePopup(500)};n.cursor="help",e.addEventListener("mouseenter",i),e.addEventListener("mouseleave",o),this._cleanUpFns.push(()=>e.removeEventListener("mouseenter",i),()=>e.removeEventListener("mouseleave",o))}async _checkForUpdate(){try{this._logUtils.log("Checking for updates..."),this._schedule(()=>this._checkForUpdate(),1728e5);const e=await this._whileNotDestroyed(this._updateUtils.checkForUpdate(s));if(!e)return this._logUtils.log("No updates available.");this._logUtils.log(`Update available: ${e.version} (${e.url})`);const r="cornflowerblue",i=Object.assign(t.createElement("div"),{innerHTML:`\n            <header style="font-size: 0.75em; opacity: 0.5;"><p>${n} v${s}</p></header>\n            <section style="color: ${r};">\n              <p><b>New version of ${n} available: v${e.version}</b></p>\n              <p>\n                <a class="nsl-update-btn-open" href="${e.url}" target="_blank">See the code</a> or\n                <a class="nsl-update-btn-copy" href="">copy it to clipboard</a>.\n              </p>\n            </section>\n          `});this._uiUtils.widgetUtils.asButtonLink(i.querySelector(".nsl-update-btn-open")),this._uiUtils.widgetUtils.asButtonLink(this._uiUtils.widgetUtils.withListeners(i.querySelector(".nsl-update-btn-copy"),{click:t=>{try{t.preventDefault(),this._uiUtils.copyToClipboard(e.code),this._uiUtils.showSnackbar(`\n                  <div style="color: green;">\n                    <p><b>Code for v${e.version} successfully copied to clipboard.</b></p>\n                    <small>(Hopefully you know what to do 🙂)</small>\n                  </div>\n                `,5e3)}catch(e){this._onError(e)}}})),this._uiUtils.showSnackbar(i,-1)}catch(e){this._logUtils.warn(`Error while checking for updates: ${e.message||e}`)}}_checkRequiresToken(e){const n=e.requiresToken();if(!n)return;const s=Object.assign(t.createElement("div"),{innerHTML:`\n          <div style="color: orange;">\n            <p><b>Fetching info for this link requires a token.</b></p>\n            <p style="color: gray;">(Reason: ${n})</p>\n          </div>\n          <div><button>Provide token now</button></div>\n        `});return this._uiUtils.widgetUtils.asButton(s.querySelector("button"),"cornflowerblue",{click:async()=>e.setToken(await this._promptForToken(e.constructor))}),s}_clearTokens(){[this._ghUtils,this._jiraUtils].forEach(e=>{const t=this._KEYS.get(e.constructor);this._storageUtils.delete(t),e.setToken(null)})}async _getPopupContentForGithubCommit(e){const t=this._checkRequiresToken(this._ghUtils);if(t)return t;const n={added:"green",modified:"darkorchid",removed:"red",renamed:"blue"},s=e.nslOwner,r=e.nslRepo,i=e.nslCommit,o=await this._ghUtils.getCommitInfo(s,r,i),a=o.message.split("\n",1).pop(),l=o.message.slice(a.length).trim();return`\n        <p style="\n              align-items: center;\n              border-bottom: 1px solid lightgray;\n              display: flex;\n              font-size: 0.9em;\n              padding-bottom: 8px;\n            ">\n          <span style="flex: auto; margin-right: 15px;">\n            <img src="${o.author.avatar}" width="25" height="25" style="border-radius: 6px;" />\n            <a href="${o.author.url}" target="_blank">@${o.author.username}</a>\n          </span>\n          <small style="color: gray; text-align: right;">\n            Committed on: ${o.committerDate.toLocaleString()}\n          </small>\n        </p>\n        <p style="align-items: center; display: flex; font-size: 1.25em;">\n          <b style="flex: auto;">${a}</b>\n          <span style="color: gray; margin-left: 30px;">@${o.sha.slice(0,7)}</span>\n        </p>\n        <pre style="margin-top: 24px;">${l||"<i>No body.</i>"}</pre>\n        <hr />\n        <div>\n          <p style="display: flex;">\n            <b style="flex: auto;">Files (${o.files.length}):</b>\n            <small style="color: lightgray;">Click on a file to see diff.</small>\n          </p>\n          <div style="overflow: auto;">\n            <div style="display: flex; flex-direction: column; width: fit-content;">\n              ${o.files.map(e=>{const t=e.patch.replace(/"/g,"&quot;").replace(/\n/g,"\n"),s=e.patch.split("\n").map(e=>`<span style="${e.startsWith("+")?"background-color: rgba(0, 255, 0, 0.11);":e.startsWith("-")?"background-color: rgba(255, 0, 0, 0.11);":e.startsWith("@@")?"color: rgba(0, 0, 0, 0.33);":"color: rgba(0, 0, 0, 0.66);"}">${e}</span>`).join("\n");return`\n          <details>\n            <summary\n                style="align-items: baseline; cursor: pointer; display: flex; margin: 0 15px 10px; outline: none;"\n                title="${t}">\n              <small style="\n                    background-color: ${n[e.status]};\n                    border-radius: 6px;\n                    color: white;\n                    font-size: 0.75em;\n                    line-height: 1em;\n                    margin-right: 5px;\n                    min-width: 55px;\n                    opacity: 0.5;\n                    padding: 2px 4px;\n                    text-align: center;\n                  ">\n                ${e.status}\n              </small>\n              <span style="flex: auto; white-space: nowrap;">\n                ${e.filename}\n              </span>\n              <small style="text-align: right; white-space: nowrap;">\n                <span style="color: ${n.added}; display: inline-block; min-width: 33px;">\n                  +${e.stats.additions}\n                </span>\n                <span style="color: ${n.removed}; display: inline-block; min-width: 33px;">\n                  -${e.stats.deletions}\n                </span>\n              </small>\n            </summary>\n            <pre style="font-size: 0.9em; line-height: calc(0.9em + 5px);">${s}</pre>\n          </details>\n        `}).join("")}\n            </div>\n          </div>\n        </div>\n      `}async _getPopupContentForGithubIssue(e){const t=this._checkRequiresToken(this._ghUtils);if(t)return t;const n=e.nslOwner,s=e.nslRepo,r=e.nslNumber,i=await this._ghUtils.getIssueInfo(n,s,r),o=i.description.replace(/^<!--[^]*?-->\s*/,"");return`\n        <p style="\n              align-items: center;\n              border-bottom: 1px solid lightgray;\n              display: flex;\n              font-size: 0.9em;\n              padding-bottom: 8px;\n            ">\n          <span style="flex: auto; margin-right: 15px;">\n            <img src="${i.author.avatar}" width="25" height="25" style="border-radius: 6px;" />\n            <a href="${i.author.url}" target="_blank">@${i.author.username}</a>\n          </span>\n          <span style="text-align: right;">\n            ${i.labels.map(e=>`\n              <small style="\n                    border: 1px solid;\n                    border-radius: 6px;\n                    line-height: 2.5em;\n                    margin-left: 3px;\n                    padding: 2px 4px;\n                    text-align: center;\n                    white-space: nowrap;\n                  ">${e}</small>\n            `).join("\n")}\n          </span>\n        </p>\n        <p style="align-items: center; display: flex; font-size: 1.25em;">\n          <span style="\n                background-color: ${{closed:"red",draft:"gray",merged:"darkorchid",open:"green"}[i.state]||"black"};\n                border-radius: 6px;\n                color: white;\n                font-size: 0.75em;\n                margin-right: 10px;\n                padding: 3px 6px;\n                text-align: center;\n              ">\n            ${i.state.toUpperCase()}\n          </span>\n          <b style="flex: auto;">${i.title}</b>\n          <span style="color: gray; margin-left: 30px; white-space: nowrap;">\n            <span style="color: lightgray;">${i.isPr?"PR":"Issue"}:</span>\n            #${i.number}\n          </span>\n        </p>\n        <pre style="margin-top: 24px;">${o||'<i style="color: gray;">No description.</i>'}</pre>\n      `}async _getPopupContentForJira(e){const t=this._checkRequiresToken(this._jiraUtils);if(t)return t;const n={closed:"red",done:"green","in progress":"blue","in review":"darkorchid",open:"gray",reopened:"gray",resolved:"green","selected for development":"gray"},s=e.nslNumber,r=await this._jiraUtils.getIssueInfo(s),i=r.issueLinks.reduce((e,t)=>((e[t.type]||(e[t.type]=[])).push(t),e),{}),o=(e,t)=>{const s=e.otherIssue,r=s.status.name;return`\n          <li style="\n                align-items: center;\n                ${t%2?"background-color: rgba(0, 0, 0, 0.05);":""}\n                display: flex;\n                padding: 2px 5px;\n              ">\n            <span style="flex: auto; ${["closed","done","resolved"].includes(r.toLowerCase())?"text-decoration: line-through;":""}">\n              <a href="${s.url}" target="_blank" style="display: flex;">\n                <b style="white-space: nowrap;">${s.number}:&ensp;</b>\n                ${s.title}\n              </a>\n            </span>\n            <small style="\n                  background-color: ${n[r.toLowerCase()]||"black"};\n                  border-radius: 6px;\n                  color: white;\n                  font-size: 0.75em;\n                  margin-left: 10px;\n                  padding: 0 4px;\n                  text-align: center;\n                  white-space: nowrap;\n                ">\n              ${r.toUpperCase()}\n            </small>\n          </li>\n        `};return`\n        <p style="\n              align-items: center;\n              border-bottom: 1px solid lightgray;\n              display: flex;\n              font-size: 0.9em;\n              padding-bottom: 8px;\n            ">\n          <span style="align-items: center; display: flex; margin-right: 15px;">\n            <img src="${r.reporter.avatar}" width="25" height="25" style="border-radius: 6px; margin-right: 5px;" />\n            <span style="flex-direction: column; display: flex;">\n              <small style="color: gray;">Reported by:</small>\n              <a href="${r.reporter.url}" target="_blank">${r.reporter.name}</a>\n            </span>\n          </span>\n          <span style="align-items: center; flex: auto; display: flex; margin-right: 15px;">\n            <img src="${r.assignee?r.assignee.avatar:""}" width="25" height="25"\n                style="border-radius: 6px; margin-right: 5px;" />\n            <span style="flex-direction: column; display: flex;">\n              <small style="color: gray;">Assigned to:</small>\n              ${r.assignee?`<a href="${r.assignee.url}" target="_blank">${r.assignee.name}</a>`:"-"}\n            </span>\n          </span>\n          <span style="flex-direction: column; display: flex; text-align: right;">\n            <span>\n              <span style="color: lightgray;">Project:</span>\n              <span style="color: gray;">${r.project}</span>\n            </span>\n            <span>\n              <span style="color: lightgray;">Fix version(s):</span>\n              <span style="color: gray;">\n                ${r.fixVersions.map(e=>`\n                  <small style="\n                        border: 1px solid;\n                        border-radius: 6px;\n                        line-height: 2.5em;\n                        margin-left: 3px;\n                        padding: 2px 4px;\n                        text-align: center;\n                        white-space: nowrap;\n                      ">${e}</small>\n                `).join("\n")||"-"}\n              </span>\n            </span>\n          </span>\n        </p>\n        <p style="align-items: center; display: flex; font-size: 1.25em;">\n          <span style="\n                background-color: ${n[r.status.name.toLowerCase()]||"black"};\n                border-radius: 6px;\n                color: white;\n                font-size: 0.75em;\n                margin-right: 10px;\n                padding: 3px 6px;\n                text-align: center;\n                white-space: nowrap;\n              ">\n            ${r.status.name.toUpperCase()}\n          </span>\n          <b style="flex: auto;">${r.title}</b>\n          <span style="color: gray; margin-left: 30px; white-space: nowrap;">\n            <span style="color: lightgray;">${r.type}:</span>\n            ${r.number}\n          </span>\n        </p>\n        <pre style="margin-top: 24px; white-space: normal;">\n          ${r.description||'<i style="color: gray;">No description.</i>'}\n        </pre>\n        ${r.issueLinks.length?`\n          <hr />\n          <div>\n            <p><b>Linked issues (${r.issueLinks.length}):</b></p>\n            <div style="padding-left: 15px;">\n              ${Object.keys(i).map(e=>`\n        <div>\n          <i style="text-transform: capitalize;">${e} (${i[e].length}):</i>\n          <ul style="margin: 5px 0 15px 15px;">\n            ${i[e].reverse().map(o).join("")}\n          </ul>\n        </div>\n      `).join("")}\n            </div>\n          </div>\n        `:""}\n      `}async _getStoredTokenFor(e){const t=this._KEYS.get(e);try{const n=this._storageUtils.get(t);if(!n)return;const s=await this._whileNotDestroyed(this._secretUtils.decrypt(n));return e.validateToken(s),s}catch(n){if(n instanceof d)throw n;this._storageUtils.delete(t);const s=`Found a corrupted or invalid stored ${e.TOKEN_NAME} and removed it.`;this._logUtils.error(n),this._logUtils.warn(s),this._uiUtils.showSnackbar(`<div style="color: orange;">\n            <b>${s}</b><br />\n            <small>(See the console for more details.)</small>\n          </div>`,3e3)}}async _promptForToken(t,s=2){const r=t.TOKEN_NAME,i=t.TOKEN_DESCRIPTION_HTML,o=`$$${n}-promptForToken-ctx-${Date.now()}-${Math.random()}`,a=e[o]={token:"",storage:"local"},l=`\n        <h2>No ${r} detected</h2>\n        <hr />\n        <p>It seems that you have not provided a ${r}.</p>\n        <p>${i}</p>\n        <hr />\n        <p>Would you like to provide one now?</p>\n        <p>\n          <form>\n            <label style="cursor: default; display: block; margin-bottom: 10px;">\n              ${r}:\n              <div style="align-items: center; display: flex; position: relative;">\n                <input\n                    type="password"\n                    placeholder="(required)"\n                    value="${a.token}"\n                    style="margin: 0;"\n                    oninput="javascript:window['${o}'].token = event.target.value;"\n                    />\n                <span\n                    style="cursor: pointer; font-size: 2em; position: absolute; right: 10px;"\n                    onmousedown="javascript:event.target.previousElementSibling.type = 'text';"\n                    onmouseup="javascript:event.target.previousElementSibling.type = 'password';">\n                  👁️\n                </span>\n              </div>\n            </label>\n            <label style="cursor: default; display: block; margin-bottom: 10px;">\n              Store:\n              <div style="align-items: center; display: flex; position: relative;">\n                <select\n                    value="${a.store}"\n                    style="cursor: pointer;"\n                    onchange="javascript:window['${o}'].storage = event.target.value;">\n                  <option value="local">Permanently (for this browser)</option>\n                  <option value="session">Only for current session</option>\n                </select>\n                <span style="\n                      font-size: 2em;\n                      pointer-events: none;\n                      position: absolute;\n                      right: 24px;\n                      transform: rotateZ(90deg);\n                    ">\n                  &#x276f;\n                </span>\n              </div>\n            </label>\n          </form>\n        </p>\n      `;try{if(!await this._uiUtils.showDialog(l,"Store token","Not now").finally(()=>delete e[o]))return;t.validateToken(a.token);const n=this._KEYS.get(t),i=await this._whileNotDestroyed(this._secretUtils.encrypt(a.token));return this._storageUtils[a.storage].set(n,i),this._uiUtils.showSnackbar(`<b style="color: green;">Successfully stored ${r}.</b>`,3e3),a.token}catch(e){if(e instanceof d)throw e;if(s>0)return this._onError(e),this._promptForToken(t,--s);const n=`Unable to acquire a valid ${r}. Giving up for now :(`;this._logUtils.error(e),this._logUtils.warn(n),this._uiUtils.showSnackbar(`<div style="color: orange;">\n            <b>${n}</b><br />\n            <small>(See the console for more details.)</small>\n          </div>`,5e3)}}_onError(e){if(e instanceof d)return;if(e instanceof p){const t=e.provider,n=t.constructor,s=this._KEYS.get(n);t.setToken(null),this._storageUtils.delete(s),this._logUtils.warn(`Removed invalid ${n.TOKEN_NAME}.`)}const t=`${e.message||e}`,n=t.length>250?`${t.slice(0,250)}...`:t;this._logUtils.error(e),this._uiUtils.showSnackbar('<pre style="background-color: white; border: none; color: red; margin: 0;">'+`<b>${this._uiUtils.escapeHtml(n)}</b><br />`+"<small>(See the console for more details.)</small></pre>",1e4)}_postInstall(){const e=[this._ghUtils,this._jiraUtils].some(e=>e.hasToken()),r=Object.assign(t.createElement("div"),{innerHTML:`\n          <b style="color: cornflowerblue;">${n} v${s} is up and running 😎</b>\n          ${e?'\n            <small style="color: gray; display: block; margin-top: 16px;">\n              Available actions:\n              <a class="nsl-install-btn-clear-tokens">Clear stored tokens</a></li>\n            </small>\n          ':""}\n        `});e&&this._uiUtils.widgetUtils.asButtonLink(this._uiUtils.widgetUtils.withListeners(r.querySelector(".nsl-install-btn-clear-tokens"),{click:e=>{this._clearTokens(),this._uiUtils.showSnackbar('<b style="color: green;">Successfully removed stored tokens.</b>',2e3),e.target.parentNode.remove()}})),this._uiUtils.showSnackbar(r,5e3),this._schedule(()=>this._checkForUpdate(),1e4)}_schedule(e,t){const n=()=>clearTimeout(s),s=setTimeout(()=>{const t=this._cleanUpFns.indexOf(n);-1!==t&&this._cleanUpFns.splice(t,1),e()},t);this._cleanUpFns.push(n)}_whileNotDestroyed(e){return Promise.race([e,this._destroyedDeferred.promise])}}).main()})(window,window.document);